@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Headers
@using System.Text
@using Newtonsoft.Json
@using RestAPI.Domain.Data.Enums
<MudDialog>
    <DialogContent>
        <EditForm Model="@_request" OnValidSubmit="OnSuccessValidation">
            <DataAnnotationsValidator/>
            <MudGrid>
                <MudItem xs="12" sm="12">
                    <MudCard>
                        <MudCardContent>
                            <MudTextField Label="Identifier" HelperText="Cookie name (regex is enabled)"
                                          @bind-Value="_request.Identifier" For="@(() => _request.Identifier)"/>
                            <MudSelect HelperText="Cookie category" @bind-Value="_request.Category" For="@(() => _request.Category)">
                                @foreach (CookieCategory category in Enum.GetValues(typeof(CookieCategory)))
                                {
                                    <MudSelectItem Value="@category">@category</MudSelectItem>
                                }
                            </MudSelect>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Error" Class="ml-auto" OnClick="Cancel">Cancel</MudButton>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success" Class="ml-auto">Create rule</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </EditForm>
    </DialogContent>
</MudDialog>

@code
{
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    [Inject] private ISnackbar _snackbar { get; set; }

    public class CreateAuditRuleDto
    {
        [Required]
        [MinLength(1, ErrorMessage = "Identifier cannot be empty")]
        public string? Identifier { get; set; }
        
        public CookieCategory Category { get; set; }
    }

    private readonly CreateAuditRuleDto _request = new();

    private async Task OnSuccessValidation(EditContext context)
    {
        var httpClient = new HttpClient();
        httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
        httpClient.Timeout = TimeSpan.FromHours(1);

        var request = new HttpRequestMessage(HttpMethod.Put, "http://localhost:5254/api/v1/AuditRule");
        request.Content = new StringContent(JsonConvert.SerializeObject(_request), Encoding.UTF8, "application/json");

        try
        {
            var result = await httpClient.SendAsync(request);

            if (result.IsSuccessStatusCode)
                _snackbar.Add("Rule was created successfully", Severity.Success);
            else
                _snackbar.Add("Error occurred while creating rule", Severity.Error);
        }
        catch (Exception e)
        {
            _snackbar.Add($"Error occurred while creating rule: {e}", Severity.Error);
        }
        
        MudDialog.Close(true);
    }

    private void Cancel()
    {
        MudDialog.Close(false);
    }
}